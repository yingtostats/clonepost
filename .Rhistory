}
i <- i + 1
alpha0 <- (- gd) * alpha0^2 / (2 * (phi - fk - gd * alpha0))
}
}
return(c(alpha0,i))
}
linearsearch(get.alpha,alpha = 1000.000000000001,exact = TRUE,method = "poly",precision = 0.0000000000001)
diag(c(1,2,3,0))
solve(diag(c(1,2,3,0)))
install.packages("matrixcalc")
library("matrixcalc")
Newton <- function(f,x0,method = "Newton",precision = 0.00001,exact = FALSE,ls.method = "0.618",criteria = "Goldstein",rho = 0.3,sigma = 0.6, r = 3, t = 1.1, v = 1) {
g <- function(x) {grad(f,x)}
n <- length(x0)
while(1) {
gk <- g(x0)
Gk <- hessian(f,x0)
if (method != "LM") {
d <- -solve(Gk)%*%gk
}else {
M <- Gk+v*diag(n)
while(is.singular.matrix(M)) {
v <- 2*v
M <- Gk+v*diag(n)
}
d <- -solve(M)%*%gk
}
alpha <- 1
if (method != "Newton") {
get.alpha <- function(alpha) {g(x0+alpha*d)}
result.alpha <- NULL
if(ls.method == "0.618") {
region <- ls.region(get.alpha,start = 1, r = r, t = t)
a <- region[1]
b <- region[2]
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.01)
alpha <- result.alpha[1]
}else {
result.alpha <- linearsearch(get.alpha,alpha0 = 1,method = ls.method,exact = exact,precision = precision)
alpha <- result.alpha[1]
}
}
x1 = x0 + alpha*d
if ((f(x1) - f(x0)) < precision) {break}
x0 <- x1
}
return(x1)
}
f <- function(x) { t(x-c(2,2,4,4))%*%x}
Newton(f,x0 = c(0,0,0,0)
)
Newton(f,x0 = c(20,40,505,40)
)
Newton(f,x0 = c(20,40,505,40),precision = 0.000000000000001)
Newton(f,x0 = c(20,40,505,40),precision = 0.000000000000001)
Newton(f,x0 = c(20,40,505,40),precision = 0.000000000000001,method = "LM")
warnings()
region <- ls.region(get.alpha,start = 1, r = r, t = t)
r=3
t=1.1
region <- ls.region(get.alpha,start = 1, r = r, t = t)
region
a <- region[1]
a
b <- region[2]
b
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.01)
exact= TRUE
precision=0.0000000000001
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.01)
alpha <- result.alpha[1]
alpha
Newton <- function(f,x0,method = "Newton",precision = 0.00001,exact = FALSE,ls.method = "0.618",criteria = "Goldstein",rho = 0.3,sigma = 0.6, r = 3, t = 1.1, v = 1) {
g <- function(x) {grad(f,x)}
n <- length(x0)
while(1) {
gk <- g(x0)
Gk <- hessian(f,x0)
if (method != "LM") {
d <- -solve(Gk)%*%gk
}else {
M <- Gk+v*diag(n)
while(is.singular.matrix(M)) {
v <- 2*v
M <- Gk+v*diag(n)
}
d <- -solve(M)%*%gk
}
alpha <- 1
if (method != "Newton") {
get.alpha <- function(alpha) {g(x0+alpha*d)}
result.alpha <- NULL
if(ls.method == "0.618") {
region <- ls.region(get.alpha,start = 1, r = r, t = t)
a <- region[1]
b <- region[2]
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.0001,criteria = criteria)
alpha <- result.alpha[1]
}else {
result.alpha <- linearsearch(get.alpha,alpha0 = 1,method = ls.method,exact = exact,precision = precision,criteria = criteria)
alpha <- result.alpha[1]
}
}
x1 = x0 + alpha*d
if ((f(x1) - f(x0)) < precision) {break}
x0 <- x1
}
return(x1)
}
Newton(f,x0 = c(20,40,505,40),precision = 0.000000000000001,method = "LM")
Newton(f,x0 = c(20,40,505,40),precision = 0.0001,method = "LM")
Newton(f,x0 = c(20,40,55,40),precision = 0.0001,method = "LM")
Newton(f,x0 = c(20,40,55,40),precision = 0.0001,method = "Damped")
Newton(f,x0 = c(20,40,55,40),precision = 0.0001,method = "Newton")
Newton(f,x0 = c(20,40,55,40),precision = 0.0001,method = "Newton")
Newton(f,x0 = c(20,40,55,40),precision = 0.0001,method = "Newton")
Newton(f,x0 = c(20,40,5,40),precision = 0.0001,method = "Newton")
Newton(f,x0 = c(20,40,5,4),precision = 0.0001,method = "Newton")
Newton(f,x0 = c(2,40,5,4),precision = 0.0001,method = "Newton")
Newton(f,x0 = c(2,4,5,4),precision = 0.0001,method = "Newton")
Newton(f,x0 = c(2,2,2,4),precision = 0.0001,method = "Newton")
Newton <- function(f,x0,method = "Newton",precision = 0.00001,exact = FALSE,ls.method = "0.618",criteria = "Goldstein",rho = 0.3,sigma = 0.6, r = 3, t = 1.1, v = 1) {
g <- function(x) {grad(f,x)}
n <- length(x0)
while(1) {
gk <- g(x0)
Gk <- hessian(f,x0)
if (method != "LM") {
d <- -solve(Gk)%*%gk
}else {
M <- Gk+v*diag(n)
while(is.singular.matrix(M)) {
v <- 2*v
M <- Gk+v*diag(n)
}
d <- -solve(M)%*%gk
}
alpha <- 1
if (method != "Newton") {
get.alpha <- function(a1) {f(x0+a1*d)}
result.alpha <- NULL
if(ls.method == "0.618") {
region <- ls.region(get.alpha,start = 1, r = r, t = t)
a <- region[1]
b <- region[2]
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.0001,criteria = criteria)
alpha <- result.alpha[1]
}else {
result.alpha <- linearsearch(get.alpha,alpha0 = 1,method = ls.method,exact = exact,precision = precision,criteria = criteria)
alpha <- result.alpha[1]
}
}
x1 = x0 + alpha*d
if ((f(x1) - f(x0)) < precision) {break}
x0 <- x1
}
return(x1)
}
Newton(f,x0 = c(2,2,2,4),precision = 0.0001,method = "Newton")
Newton(f,x0 = c(2,2,2,444),precision = 0.0001,method = "Newton")
Newton(f,x0 = c(2,-33,2,444),precision = 0.0001,method = "Newton")
Newton(f,x0 = c(2,-33,2,444),precision = 0.0001,method = "LM")
Newton(f,x0 = c(2,-33,2,444),precision = 0.0001,method = "LM",ls.method = "poly")
linearsearch(get.alpha,a=4,b=10,alpha = 1000.000000000001,exact = FALSE,precision = 0.0000000000001)
linearsearch(get.alpha,a=4,b=10,alpha = 1000.000000000001,exact = TRUE,precision = 0.0000000000001)
linearsearch(get.alpha,alpha = 1000.000000000001,exact = FALSE,method = "poly",precision = 0.0000000000001)
linearsearch(get.alpha,a=4,b=10,alpha = 1000.000000000001,exact = FALSE,precision = 0.0000000000001,criteria = "StrongWolfe")
linearsearch(get.alpha,a=4,b=10,alpha = 1000.000000000001,exact = FALSE,precision = 0.0000000000001,criteria = "Wolfe")
f
Newton <- function(f,x0,method = "Newton",precision = 0.00001,exact = FALSE,ls.method = "0.618",criteria = "Goldstein",rho = 0.3,sigma = 0.6, r = 3, t = 1.1, v = 1) {
g <- function(x) {grad(f,x)}
n <- length(x0)
while(1) {
gk <- g(x0)
Gk <- hessian(f,x0)
if (method != "LM") {
d <- -solve(Gk)%*%gk
}else {
M <- Gk+v*diag(n)
while(is.singular.matrix(M)) {
v <- 2*v
M <- Gk+v*diag(n)
}
d <- -solve(M)%*%gk
}
alpha <- 1
if (method != "Newton") {
get.alpha <- function(a1) {f(x0+a1*d)}
result.alpha <- NULL
if(ls.method == "0.618") {
region <- ls.region(get.alpha,start = 1, r = r, t = t)
a <- region[1]
b <- region[2]
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.0001,criteria = criteria)
alpha <- result.alpha[1]
}else {
result.alpha <- linearsearch(get.alpha,alpha0 = 1,method = ls.method,exact = exact,precision = precision,criteria = criteria)
alpha <- result.alpha[1]
}
}
x1 = x0 + alpha*d
if ((f(x1) - f(x0)) < precision) {break}
x0 <- x1
}
return(x1)
}
Newton(f,x0 = c(2,-33,2,444),precision = 0.1,method = "LM",ls.method = "poly")
Newton <- function(f,x0,method = "Newton",precision = 0.00001,exact = FALSE,ls.method = "0.618",criteria = "Goldstein",rho = 0.3,sigma = 0.6, r = 3, t = 1.1, v = 1) {
g <- function(x) {grad(f,x)}
n <- length(x0)
while(1) {
gk <- g(x0)
Gk <- hessian(f,x0)
if (method != "LM") {
d <- -solve(Gk)%*%gk
}else {
M <- Gk+v*diag(n)
while(is.singular.matrix(M)) {
v <- 2*v
M <- Gk+v*diag(n)
}
d <- -solve(M)%*%gk
}
alpha <- 1
if (method != "Newton") {
get.alpha <- function(a1) {f(x0+t(rep(a1,n))%*%d)}
result.alpha <- NULL
if(ls.method == "0.618") {
region <- ls.region(get.alpha,start = 1, r = r, t = t)
a <- region[1]
b <- region[2]
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.0001,criteria = criteria)
alpha <- result.alpha[1]
}else {
result.alpha <- linearsearch(get.alpha,alpha0 = 1,method = ls.method,exact = exact,precision = precision,criteria = criteria)
alpha <- result.alpha[1]
}
}
x1 = x0 + alpha*d
if ((f(x1) - f(x0)) < precision) {break}
x0 <- x1
}
return(x1)
}
Newton(f,x0 = c(2,-33,2,444),precision = 0.1,method = "LM",ls.method = "poly")
Newton(f,x0 = c(2,-33,2,444),precision = 0.1,method = "LM",ls.method = "poly")
Newton(f,x0 = c(2,-33,2,444),precision = 0.1,method = "LM",ls.method = "poly")
Newton(f,x0 = c(2,-33,2,444),precision = 0.01,method = "LM",ls.method = "poly")
Newton(f,x0 = c(2,-33,2,444),precision = 0.00001,method = "LM",ls.method = "poly")
Newton(f,x0 = c(2,-33,2,444),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
Newton(f,x0 = c(2,-33,2,4),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
a1=1
d=c(1,2,3,4)
x0 = c(1,2,3,3)
x0+t(rep(a1,n))%*%d
n=4
x0+t(rep(a1,n))%*%d
Newton(f,x0 = c(2,-33,2,444),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
Newton <- function(f,x0,method = "Newton",precision = 0.00001,exact = FALSE,ls.method = "0.618",criteria = "Goldstein",rho = 0.3,sigma = 0.6, r = 3, t = 1.1, v = 1) {
g <- function(x) {grad(f,x)}
n <- length(x0)
while(1) {
gk <- g(x0)
Gk <- hessian(f,x0)
if (method != "LM") {
d <- -solve(Gk)%*%gk
}else {
M <- Gk+v*diag(n)
while(is.singular.matrix(M)) {
v <- 2*v
M <- Gk+v*diag(n)
}
d <- -solve(M)%*%gk
}
alpha <- 1
if (method != "Newton") {
get.alpha <- function(a1) {f(x0+t(rep(a1,n))%*%d)}
result.alpha <- NULL
if(ls.method == "0.618") {
region <- ls.region(get.alpha,start = 1, r = r, t = t)
a <- region[1]
b <- region[2]
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.0001,criteria = criteria)
alpha <- result.alpha[1]
}else {
result.alpha <- linearsearch(get.alpha,alpha0 = 1,method = ls.method,exact = exact,precision = precision,criteria = criteria)
alpha <- result.alpha[1]
}
}
x1 = x0 + alpha*d
if ((f(x1) - f(x0)) < precision) {break}
x0 <- x1
}
return(x1)
}
Newton(f,x0 = c(2,-33,2,444),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
Newton(f,x0 = c(2,-33,2,44),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
Newton(f,x0 = c(2,-33,2,4),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
Newton(f,x0 = c(2,-33,2,44),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
Newton(f,x0 = c(2,-33,2,4),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
Newton <- function(f,x0,method = "Newton",precision = 0.00001,exact = FALSE,ls.method = "0.618",criteria = "Goldstein",rho = 0.3,sigma = 0.6, r = 3, t = 1.1, v = 1) {
g <- function(x) {grad(f,x)}
n <- length(x0)
while(1) {
gk <- g(x0)
Gk <- hessian(f,x0)
if (method != "LM") {
d <- -solve(Gk)%*%gk
}else {
M <- Gk+v*diag(n)
while(is.singular.matrix(M)) {
v <- 2*v
M <- Gk+v*diag(n)
}
d <- -solve(M)%*%gk
}
alpha <- 1
if (method != "Newton") {
get.alpha <- function(a1) {f(x0+a1*d)}
result.alpha <- NULL
if(ls.method == "0.618") {
region <- ls.region(get.alpha,start = 1, r = r, t = t)
a <- region[1]
b <- region[2]
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.0001,criteria = criteria)
alpha <- result.alpha[1]
}else {
result.alpha <- linearsearch(get.alpha,alpha0 = 1,method = ls.method,exact = exact,precision = precision,criteria = criteria)
alpha <- result.alpha[1]
}
}
x1 = x0 + alpha*d
if ((f(x1) - f(x0)) < precision) {break}
x0 <- x1
}
return(x1)
}
Newton(f,x0 = c(2,-33,2,4),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
f <- function(x) { sum(t(x-c(2,2,4,4))*x)}
f(c(2,3,4,3))
f(c(2,3,4,0))
Newton <- function(f,x0,method = "Newton",precision = 0.00001,exact = FALSE,ls.method = "0.618",criteria = "Goldstein",rho = 0.3,sigma = 0.6, r = 3, t = 1.1, v = 1) {
g <- function(x) {grad(f,x)}
n <- length(x0)
while(1) {
gk <- g(x0)
Gk <- hessian(f,x0)
if (method != "LM") {
d <- -solve(Gk)%*%gk
}else {
M <- Gk+v*diag(n)
while(is.singular.matrix(M)) {
v <- 2*v
M <- Gk+v*diag(n)
}
d <- -solve(M)%*%gk
}
alpha <- 1
if (method != "Newton") {
get.alpha <- function(a1) {f(as.vector(x0+a1*d))}
result.alpha <- NULL
if(ls.method == "0.618") {
region <- ls.region(get.alpha,start = 1, r = r, t = t)
a <- region[1]
b <- region[2]
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.0001,criteria = criteria)
alpha <- result.alpha[1]
}else {
result.alpha <- linearsearch(get.alpha,alpha0 = 1,method = ls.method,exact = exact,precision = precision,criteria = criteria)
alpha <- result.alpha[1]
}
}
x1 = x0 + alpha*d
if ((f(x1) - f(x0)) < precision) {break}
x0 <- x1
}
return(x1)
}
Newton(f,x0 = c(2,-33,2,4),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
f <- function(x) { t(x-c(2,2,4,4))%*%x}
Newton <- function(f,x0,method = "Newton",precision = 0.00001,exact = FALSE,ls.method = "0.618",criteria = "Goldstein",rho = 0.3,sigma = 0.6, r = 3, t = 1.1, v = 1) {
g <- function(x) {grad(f,x)}
n <- length(x0)
while(1) {
gk <- g(x0)
Gk <- hessian(f,x0)
if (method != "LM") {
d <- -solve(Gk)%*%gk
}else {
M <- Gk+v*diag(n)
while(is.singular.matrix(M)) {
v <- 2*v
M <- Gk+v*diag(n)
}
d <- -solve(M)%*%gk
}
alpha <- 1
if (method != "Newton") {
get.alpha <- function(a1) {f(as.vector(x0+a1*d))}
result.alpha <- NULL
if(ls.method == "0.618") {
region <- ls.region(get.alpha,start = 1, r = r, t = t)
a <- region[1]
b <- region[2]
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.0001,criteria = criteria)
alpha <- result.alpha[1]
}else {
result.alpha <- linearsearch(get.alpha,alpha0 = 1,method = ls.method,exact = exact,precision = precision,criteria = criteria)
alpha <- result.alpha[1]
}
}
x1 = x0 + alpha*d
if ((f(x1) - f(x0)) < precision) {break}
x0 <- x1
}
return(x1)
}
Newton(f,x0 = c(2,-33,2,4),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
d
a1
rep(a1,4)
rep(a1,4)%*%d
x0 + rep(a1,4)%*%d
Newton <- function(f,x0,method = "Newton",precision = 0.00001,exact = FALSE,ls.method = "0.618",criteria = "Goldstein",rho = 0.3,sigma = 0.6, r = 3, t = 1.1, v = 1) {
g <- function(x) {grad(f,x)}
n <- length(x0)
while(1) {
gk <- g(x0)
Gk <- hessian(f,x0)
if (method != "LM") {
d <- -solve(Gk)%*%gk
}else {
M <- Gk+v*diag(n)
while(is.singular.matrix(M)) {
v <- 2*v
M <- Gk+v*diag(n)
}
d <- -solve(M)%*%gk
}
alpha <- 1
if (method != "Newton") {
get.alpha <- function(a1) {f(as.vector(x0+rep(a1,n)%*%d))}
result.alpha <- NULL
if(ls.method == "0.618") {
region <- ls.region(get.alpha,start = 1, r = r, t = t)
a <- region[1]
b <- region[2]
result.alpha <- linearsearch(get.alpha,a = a, b = b,exact = exact,precision = 0.0001,criteria = criteria)
alpha <- result.alpha[1]
}else {
result.alpha <- linearsearch(get.alpha,alpha0 = 1,method = ls.method,exact = exact,precision = precision,criteria = criteria)
alpha <- result.alpha[1]
}
}
x1 = x0 + alpha*d
if ((f(x1) - f(x0)) < precision) {break}
x0 <- x1
}
return(x1)
}
Newton(f,x0 = c(2,-33,2,4),precision = 0.0000000000000000000000001,method = "LM",ls.method = "poly")
new_post("Post title!")
install.packages("brocks")
library("brocks")
library(brocks)
install.packages("brocks")
??brocks
new_post("Post title!")
install.packages(c("servr", "knitr"), repos = "http://cran.rstudio.com")
install.packages(c("servr", "knitr"), repos = "http://cran.rstudio.com")
install.packages("brocks")
??rmd2md
devtools::install_github('ivyleavedtoadflax/rmd2md')
library("rmd2md")
rmd2md("C:\\Users\\user\\Desktop\\232B Applied Stats\\PROJECT I\\",dir_rmd = "PROJI-YING ZHANG.Rmd")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io\\",dir_rmd = "C:\\Users\\user\\Desktop\\232B Applied Stats\\PROJECT I\\PROJI-YING ZHANG.Rmd")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io\\",dir_rmd = "PROJI-YING ZHANG.Rmd")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io\\_post",dir_rmd = "PROJI-YING ZHANG.Rmd")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io\\_posts",dir_rmd = "PROJI-YING ZHANG.Rmd")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io",dir_rmd = "\\_posts\\PROJI-YING ZHANG.Rmd")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io",dir_rmd = "\\_posts\\PROJI-YING ZHANG.Rmd",figures = "\\_assets")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io",dir_rmd = "\\_posts\\PROJI-YING ZHANG.Rmd",figures = "\\assets")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io",dir_rmd = "\\_posts\\PROJI-YING ZHANG.Rmd",figures = "\\assets")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io",dir_rmd = "\\_posts\\PROJI-YING ZHANG.Rmd")
??rmd2md
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io",dir_rmd = "\\_posts\\PROJI-YING ZHANG.Rmd",figures = "\\assets\\images")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io",dir_rmd = "\\_posts\\PROJI-YING ZHANG.Rmd",figures = "C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io\\assets\\images")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io",dir_rmd = "\\_posts",figures = "C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io\\assets\\images")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io",dir_rmd = "\\_posts",figures = "C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io\\assets\\images")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io",dir_rmd = "\\_posts",figures = "C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io\\assets\\images")
rmd2md("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io",dir_rmd = "\\_posts",figures = "C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io\\assets\\images")
setwd("C:/Documents/Github")
setwd("C:\\Users\\user\\Documents\\GitHub\\yingtostats.github.io")
source("rmd2md.R")
rmd2md()
install.packages("TSA")
install.packages("TSA")
install.packages("forecast")
data(co2)
#load the data
library(TSA)
library(forecast)
install.packages("timeDate")
install.packages("timeDate")
library(TSA)
library(forecast)
data(co2)
getwd()
source("rmd2md.R")
rmd2md()
rmd2md()
